{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adrian\\\\Desktop\\\\Programming\\\\Projects\\\\Live-Vehicle-Map\\\\client\\\\src\\\\features\\\\Map\\\\GoogleMap.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-plusplus */\nimport GoogleMapReact from 'google-map-react';\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getLocationMarkers } from './mapUtils';\nimport { fetchVehicleIds } from '../../state/actions/mapActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GoogleMap = _ref => {\n  _s();\n\n  let {\n    mapConfig,\n    locationMarkers\n  } = _ref;\n  const dispatch = useDispatch();\n  const {\n    vehiclesLocations,\n    selectingArea\n  } = useSelector(state => state.map);\n  console.log('RENDER - google map WITH polygons');\n  const [polygonConfig, setPolygonConfig] = useState({\n    paths: defualtPolygonCoordinates,\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.35,\n    editable: true,\n    draggable: true,\n    geodesic: true,\n    visible: selectingArea\n  });\n  useEffect(() => {\n    setPolygonConfig({ ...polygonConfig,\n      visible: selectingArea\n    });\n  }, [selectingArea]);\n\n  const handlePolygonMouseUp = polygon => {\n    const vertices = polygon.getPath();\n    const coordinates = [];\n\n    for (let i = 0; i < vertices.getLength(); i++) {\n      const xy = vertices.getAt(i);\n      coordinates.push([xy.lat(), xy.lng()]);\n    }\n\n    dispatch(fetchVehicleIds(coordinates));\n  };\n\n  const handleApiLoaded = (map, maps) => {\n    console.log('here');\n    const polygon = new maps.Polygon(polygonConfig);\n    polygon.setMap(map);\n    polygon.addListener('mouseup', () => handlePolygonMouseUp(polygon));\n  }; //   ((params) => {\n  //       console.log('here212312');\n  //   })();\n\n\n  return /*#__PURE__*/_jsxDEV(GoogleMapReact, {\n    bootstrapURLKeys: {\n      key: process.env.REACT_APP_API_KEY\n    },\n    defaultCenter: mapConfig.center,\n    defaultZoom: mapConfig.zoom,\n    yesIWantToUseGoogleMapApiInternals: true,\n    onChange: () => console.log('map changed'),\n    onGoogleApiLoaded: _ref2 => {\n      let {\n        map,\n        maps\n      } = _ref2;\n      return handleApiLoaded(map, maps);\n    },\n    children: locationMarkers\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 7\n  }, this);\n};\n\n_s(GoogleMap, \"pzBjIE2rJ7XEqFY4OPOcrPihcb8=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = GoogleMap;\nexport default GoogleMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"GoogleMap\");","map":{"version":3,"sources":["C:/Users/Adrian/Desktop/Programming/Projects/Live-Vehicle-Map/client/src/features/Map/GoogleMap.jsx"],"names":["GoogleMapReact","React","useEffect","useState","useSelector","useDispatch","getLocationMarkers","fetchVehicleIds","GoogleMap","mapConfig","locationMarkers","dispatch","vehiclesLocations","selectingArea","state","map","console","log","polygonConfig","setPolygonConfig","paths","defualtPolygonCoordinates","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","editable","draggable","geodesic","visible","handlePolygonMouseUp","polygon","vertices","getPath","coordinates","i","getLength","xy","getAt","push","lat","lng","handleApiLoaded","maps","Polygon","setMap","addListener","key","process","env","REACT_APP_API_KEY","center","zoom"],"mappings":"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","sourcesContent":["/* eslint-disable no-plusplus */\r\nimport GoogleMapReact from 'google-map-react';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getLocationMarkers } from './mapUtils';\r\nimport { fetchVehicleIds } from '../../state/actions/mapActions';\r\n\r\nconst GoogleMap = ({ mapConfig, locationMarkers }) => {\r\n    const dispatch = useDispatch();\r\n    const { vehiclesLocations, selectingArea } = useSelector((state) => state.map);\r\n    console.log('RENDER - google map WITH polygons');\r\n\r\n    const [polygonConfig, setPolygonConfig] = useState({\r\n        paths: defualtPolygonCoordinates,\r\n        strokeColor: '#FF0000',\r\n        strokeOpacity: 0.8,\r\n        strokeWeight: 2,\r\n        fillColor: '#FF0000',\r\n        fillOpacity: 0.35,\r\n        editable: true,\r\n        draggable: true,\r\n        geodesic: true,\r\n        visible: selectingArea,\r\n    });\r\n\r\n    useEffect(() => {\r\n        setPolygonConfig({ ...polygonConfig, visible: selectingArea });\r\n    }, [selectingArea]);\r\n\r\n    const handlePolygonMouseUp = (polygon) => {\r\n        const vertices = polygon.getPath();\r\n        const coordinates = [];\r\n        for (let i = 0; i < vertices.getLength(); i++) {\r\n          const xy = vertices.getAt(i);\r\n          coordinates.push([xy.lat(), xy.lng()]);\r\n        }\r\n        dispatch(fetchVehicleIds(coordinates));\r\n      };\r\n      \r\n      const handleApiLoaded = (map, maps) => {\r\n        console.log('here');\r\n        const polygon = new maps.Polygon(polygonConfig);\r\n        polygon.setMap(map);\r\n        polygon.addListener('mouseup', () => handlePolygonMouseUp(polygon));\r\n      };\r\n\r\n    //   ((params) => {\r\n    //       console.log('here212312');\r\n    //   })();\r\n      \r\n    return (\r\n      <GoogleMapReact \r\n        bootstrapURLKeys={{ key: process.env.REACT_APP_API_KEY }}\r\n        defaultCenter={mapConfig.center}\r\n        defaultZoom={mapConfig.zoom}\r\n        yesIWantToUseGoogleMapApiInternals \r\n        onChange={() => console.log('map changed')}\r\n        onGoogleApiLoaded={({ map, maps }) => handleApiLoaded(map, maps)}\r\n      >\r\n        {locationMarkers}\r\n      </GoogleMapReact>\r\n    );\r\n};\r\n\r\nexport default GoogleMap;\r\n"]},"metadata":{},"sourceType":"module"}