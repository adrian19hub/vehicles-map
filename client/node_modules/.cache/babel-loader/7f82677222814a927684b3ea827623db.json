{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adrian\\\\Desktop\\\\Programming\\\\Projects\\\\Live-Vehicle-Map\\\\client\\\\src\\\\features\\\\Map\\\\GoogleMapWithPolygon.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-plusplus */\nimport GoogleMapReact from 'google-map-react';\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getLocationMarkers } from './mapUtils'; // import { defualtPolygonCoordinates } from './polygonAPI';\n\nimport { fetchVehicleIds } from '../../state/actions/mapActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defualtPolygonCoordinates = [{\n  lat: 51.522121898364986,\n  lng: -0.1593582845911126\n}, {\n  lat: 51.489486554202024,\n  lng: -0.16009828252122368\n}, {\n  lat: 51.48945352696307,\n  lng: -0.09697481847935624\n}, {\n  lat: 51.52190825390342,\n  lng: -0.09600745825457122\n}];\n\nconst GoogleMapWithPolygon = _ref => {\n  _s();\n\n  let {\n    mapConfig,\n    locationMarkers\n  } = _ref;\n  const dispatch = useDispatch();\n  const selectingArea = useSelector(state => state.map.selectingArea);\n  console.log('RENDER - google map with polygons');\n  const [coordinates] = useState(defualtPolygonCoordinates);\n  const [polygonConfig] = useState({\n    paths: coordinates,\n    strokeColor: '#002e5b',\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: '#0082ff',\n    fillOpacity: 0.35,\n    editable: true,\n    draggable: true,\n    geodesic: true,\n    visible: selectingArea\n  });\n  useEffect(() => {\n    dispatch(fetchVehicleIds(coordinates));\n  }, []);\n\n  const handlePolygonMouseUp = polygon => {\n    const vertices = polygon.getPath();\n    const newCoordinates = [];\n\n    for (let i = 0; i < vertices.getLength(); i++) {\n      const xy = vertices.getAt(i);\n      newCoordinates.push({\n        lat: xy.lat(),\n        lng: xy.lng()\n      });\n    }\n\n    dispatch(fetchVehicleIds(newCoordinates));\n  };\n\n  const handleApiLoaded = (map, maps) => {\n    const polygon = new maps.Polygon(polygonConfig);\n    polygon.setMap(map);\n    polygon.addListener('mouseup', () => handlePolygonMouseUp(polygon));\n  };\n\n  return /*#__PURE__*/_jsxDEV(GoogleMapReact, {\n    bootstrapURLKeys: {\n      key: process.env.REACT_APP_API_KEY\n    },\n    defaultCenter: mapConfig.center,\n    defaultZoom: mapConfig.zoom,\n    yesIWantToUseGoogleMapApiInternals: true,\n    onGoogleApiLoaded: _ref2 => {\n      let {\n        map,\n        maps\n      } = _ref2;\n      return handleApiLoaded(map, maps);\n    },\n    children: locationMarkers\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 7\n  }, this);\n};\n\n_s(GoogleMapWithPolygon, \"Xeu5W7IDIQpOOT7H8gEnEzStD1I=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = GoogleMapWithPolygon;\nexport default GoogleMapWithPolygon;\n\nvar _c;\n\n$RefreshReg$(_c, \"GoogleMapWithPolygon\");","map":{"version":3,"sources":["C:/Users/Adrian/Desktop/Programming/Projects/Live-Vehicle-Map/client/src/features/Map/GoogleMapWithPolygon.jsx"],"names":["GoogleMapReact","React","useEffect","useState","useSelector","useDispatch","getLocationMarkers","fetchVehicleIds","defualtPolygonCoordinates","lat","lng","GoogleMapWithPolygon","mapConfig","locationMarkers","dispatch","selectingArea","state","map","console","log","coordinates","polygonConfig","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","editable","draggable","geodesic","visible","handlePolygonMouseUp","polygon","vertices","getPath","newCoordinates","i","getLength","xy","getAt","push","handleApiLoaded","maps","Polygon","setMap","addListener","key","process","env","REACT_APP_API_KEY","center","zoom"],"mappings":"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","sourcesContent":["/* eslint-disable no-plusplus */\r\nimport GoogleMapReact from 'google-map-react';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getLocationMarkers } from './mapUtils';\r\n// import { defualtPolygonCoordinates } from './polygonAPI';\r\nimport { fetchVehicleIds } from '../../state/actions/mapActions';\r\n\r\nconst defualtPolygonCoordinates = [\r\n  {   \r\n    lat: 51.522121898364986,\r\n    lng: -0.1593582845911126,\r\n  },\r\n  {  \r\n    lat: 51.489486554202024,\r\n    lng: -0.16009828252122368,\r\n  },\r\n  { \r\n    lat: 51.48945352696307,\r\n    lng: -0.09697481847935624,\r\n  },\r\n  {   \r\n    lat: 51.52190825390342,\r\n    lng: -0.09600745825457122,\r\n  },\r\n];\r\n\r\nconst GoogleMapWithPolygon = ({ mapConfig, locationMarkers }) => {\r\n    const dispatch = useDispatch();\r\n    const selectingArea = useSelector((state) => state.map.selectingArea);\r\n    console.log('RENDER - google map with polygons');\r\n    const [coordinates] = useState(defualtPolygonCoordinates);\r\n\r\n    const [polygonConfig] = useState({\r\n        paths: coordinates,\r\n        strokeColor: '#002e5b',\r\n        strokeOpacity: 0.8,\r\n        strokeWeight: 2,\r\n        fillColor: '#0082ff',\r\n        fillOpacity: 0.35,\r\n        editable: true,\r\n        draggable: true,\r\n        geodesic: true,\r\n        visible: selectingArea,\r\n    });\r\n\r\n    useEffect(() => { dispatch(fetchVehicleIds(coordinates)); }, []);\r\n\r\n    const handlePolygonMouseUp = (polygon) => {\r\n        const vertices = polygon.getPath();\r\n        const newCoordinates = [];\r\n        for (let i = 0; i < vertices.getLength(); i++) {\r\n          const xy = vertices.getAt(i);\r\n          newCoordinates.push({ lat: xy.lat(), lng: xy.lng() });\r\n        }\r\n        dispatch(fetchVehicleIds(newCoordinates));\r\n    };\r\n      \r\n    const handleApiLoaded = (map, maps) => {\r\n      const polygon = new maps.Polygon(polygonConfig);\r\n      polygon.setMap(map);\r\n      polygon.addListener('mouseup', () => handlePolygonMouseUp(polygon));\r\n    };\r\n\r\n    return (\r\n      <GoogleMapReact \r\n        bootstrapURLKeys={{ key: process.env.REACT_APP_API_KEY }}\r\n        defaultCenter={mapConfig.center}\r\n        defaultZoom={mapConfig.zoom}\r\n        yesIWantToUseGoogleMapApiInternals \r\n        onGoogleApiLoaded={({ map, maps }) => handleApiLoaded(map, maps)}\r\n      >\r\n        {locationMarkers}\r\n      </GoogleMapReact>\r\n    );\r\n};\r\n\r\nexport default GoogleMapWithPolygon;\r\n"]},"metadata":{},"sourceType":"module"}